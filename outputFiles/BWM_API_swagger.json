{
    "folders": [
        {
            "description": "Folder for bw_allocations", 
            "collection_name": "BWM API", 
            "collection": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "id": "0da238f9-4c90-439d-866b-d0e0fbffca22", 
            "collection_id": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "order": [
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0", 
                "9786f83d-af22-4d0d-b364-f7a17750bf381", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e02", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e13", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e24", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e35", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e6", 
                "9786f83d-af22-4d0d-b364-f7a17750bf387", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e08", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e19", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e210", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e311", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e12", 
                "9786f83d-af22-4d0d-b364-f7a17750bf3813", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e014", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e115", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e216", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e317", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e18", 
                "9786f83d-af22-4d0d-b364-f7a17750bf3819", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e020", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e121", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e222", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e323", 
                "1696ee7b-f2a0-4382-bfaa-3f77c888987324", 
                "1696ee7b-f2a0-4382-bfaa-3f77c888987325", 
                "1696ee7b-f2a0-4382-bfaa-3f77c888987326", 
                "1696ee7b-f2a0-4382-bfaa-3f77c888987327", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f128", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f129", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f130", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f131", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f132", 
                "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2633", 
                "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2634", 
                "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2635", 
                "38be9719-f94b-43cd-9365-08c9704c266d36", 
                "38be9719-f94b-43cd-9365-08c9704c266d37", 
                "38be9719-f94b-43cd-9365-08c9704c266d38", 
                "38be9719-f94b-43cd-9365-08c9704c266d39", 
                "38be9719-f94b-43cd-9365-08c9704c266d40", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e00", 
                "9786f83d-af22-4d0d-b364-f7a17750bf3811", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e022", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e133", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e244", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e355", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f1286", 
                "38be9719-f94b-43cd-9365-08c9704c266d367", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e08", 
                "9786f83d-af22-4d0d-b364-f7a17750bf3819", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0210", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e1311", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e2412", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e3513", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f12814", 
                "38be9719-f94b-43cd-9365-08c9704c266d3615", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e016", 
                "9786f83d-af22-4d0d-b364-f7a17750bf38117", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0218", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e1319", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e2420", 
                "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e3521", 
                "f7e0ce14-198f-434d-b399-3ca25ec9d1f12822", 
                "38be9719-f94b-43cd-9365-08c9704c266d3623"
            ], 
            "name": "bw_allocations"
        }
    ], 
    "description": "The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI", 
    "timestamp": 1413302258635, 
    "id": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
    "synced": false, 
    "requests": [
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/1',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/2',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf381", 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/3',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e02", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/4',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e13", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/5',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e24", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/6',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e35", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_ids={{app_instance_id}}&app_names={{app_name}}&session_ids={{session_id}}", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/7',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e6", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationIds", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/8',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf387", 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/9',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_ids={{app_instance_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e08", 
            "name": "TC_400"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/10',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_names={{app_name}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e19", 
            "name": "TC_400"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/11',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_ids={{session_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e210", 
            "name": "TC_400"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/12',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationss", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e311", 
            "name": "TC_400"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/13',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e12", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/14',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf3813", 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/15',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e014", 
            "name": "TC_403"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/16',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e115", 
            "name": "TC_403"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/17',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e216", 
            "name": "TC_403"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/18',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e317", 
            "name": "TC_403"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/19',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e18", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb/:allocationId", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/20',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf3819", 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/21',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb?app_instance_id={{app_instance_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e020", 
            "name": "TC_404"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/22',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb?app_name={{app_name}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e121", 
            "name": "TC_404"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/23',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb?session_id={{session_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e222", 
            "name": "TC_404"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/24',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e323", 
            "name": "TC_404"
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationss", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    postman.setNextRequest(request)", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/25',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1696ee7b-f2a0-4382-bfaa-3f77c888987324", 
            "description": "This method is used to create a bandwidthAllocation resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    postman.setNextRequest(request)", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/26',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1696ee7b-f2a0-4382-bfaa-3f77c888987325", 
            "description": "This method is used to create a bandwidthAllocation resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    postman.setNextRequest(request)", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/27',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1696ee7b-f2a0-4382-bfaa-3f77c888987326", 
            "description": "This method is used to create a bandwidthAllocation resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    postman.setNextRequest(request)", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/28',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1696ee7b-f2a0-4382-bfaa-3f77c888987327", 
            "description": "This method is used to create a bandwidthAllocation resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/29',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f128", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationIds", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/30',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f129", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/31',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f130", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/32',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f131", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb/:allocationId", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/33',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f132", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb/:allocationId", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/34',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2633", 
            "description": "Remove a specific bandwidthAllocation resource. DELETE method is typically used in \"Unregister from Bandwidth Management Service\" procedure"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/35',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2634", 
            "description": "Remove a specific bandwidthAllocation resource. DELETE method is typically used in \"Unregister from Bandwidth Management Service\" procedure"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/36',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "11dca9cb-81c6-4cb9-b86f-6e56f1b3ad2635", 
            "description": "Remove a specific bandwidthAllocation resource. DELETE method is typically used in \"Unregister from Bandwidth Management Service\" procedure"
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/37',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d36", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationIds", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/38',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d37", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/39',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d38", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/40',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d39", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocationssnoitacolla_wb/:allocationId", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/41',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d40", 
            "description": "This method updates the information about a specific bandwidthAllocation resource. "
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/42',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e00", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/43',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf3811", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/44',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e022", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/45',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e133", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/46',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e244", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/47',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e355", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/48',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f1286", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PUT", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/49',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d367", 
            "name": "TC_01 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PATCH", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/50',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e08", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/51',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf3819", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/52',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0210", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/53',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e1311", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/54',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e2412", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/55',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e3513", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/56',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f12814", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PUT", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/57',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d3615", 
            "name": "TC_10 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PATCH", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/58',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e016", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/59',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "9786f83d-af22-4d0d-b364-f7a17750bf38117", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/60',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_instance_id\",currentData.app_instance_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e0218", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/61',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"app_name\",currentData.app_name);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e1319", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/62',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"session_id\",currentData.session_id);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e2420", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/63',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "id": "696ec2bb-2589-425b-a37d-3c6d3c7d5e5e3521", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "GET", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/64',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "f7e0ce14-198f-434d-b399-3ca25ec9d1f12822", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232003, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PUT", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            "    url: 'localhost:8081/read_Excel/65',", 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"allocationId\",currentData.allocationId);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "9a833fab-d85b-4f2f-a37b-edb17c74e159", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "id": "38be9719-f94b-43cd-9365-08c9704c266d3623", 
            "name": "TC_00 ", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"sessionFilter\": [\n        {\n            \"SourcePort\": [\n                \"{{SourcePort}}\"\n            ],\n            \"DstAddress\": \"{{DstAddress}}\",\n            \"DstPort\": [\n                \"{{DstPort}}\"\n            ],\n            \"Protocol\": \"{{Protocol}}\",\n            \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1540989232004, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "PATCH", 
            "responses": []
        }
    ], 
    "order": [], 
    "name": "BWM API"
}
{
    "folders": [
        {
            "description": "Folder for bw_allocations", 
            "collection_name": "BWM API", 
            "collection": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "id": "c3606d14-1004-426b-b9e1-77d64390a861", 
            "collection_id": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "order": [
                "e8cd47fa-56b5-4a9e-add6-36209519e7f6", 
                "3c68395d-a7fe-4e20-8ee8-4f4578661918", 
                "c6430d00-84ef-43ac-8b31-56f8252bd924", 
                "9b185078-39af-4654-9897-b72452bdfa4e", 
                "6019d42e-794a-4cfc-bcaf-eb537e3c7d28", 
                "960eb176-7feb-4301-a168-13f484ff00f4", 
                "e8cd47fa-56b5-4a9e-add6-36209519e7f60", 
                "e8cd47fa-56b5-4a9e-add6-36209519e7f61", 
                "e8cd47fa-56b5-4a9e-add6-36209519e7f62", 
                "e8cd47fa-56b5-4a9e-add6-36209519e7f63"
            ], 
            "name": "bw_allocations"
        }
    ], 
    "description": "The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}&app_name={{app_name}}&session_id={{session_id}}", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574427, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "e8cd47fa-56b5-4a9e-add6-36209519e7f6", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    postman.setNextRequest(request)", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "", 
                            "if(!list){", 
                            "        var list = [];", 
                            "        pm.sendRequest({", 
                            "        url: 'localhost:8081/read_Excel',", 
                            "        method: 'GET',", 
                            "        header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "        }, function (err, res) {", 
                            "        var response_json = res.json();", 
                            "        if(list.length === 0){", 
                            "        var key;", 
                            "        for (key in response_json) {", 
                            "            if (response_json.hasOwnProperty(key))", 
                            "            {", 
                            "                list.push(response_json[key]);", 
                            "            }", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "", 
                            "    pm.environment.set(\"list\",list);", 
                            "});", 
                            "}", 
                            "else {", 
                            "    var currentData = list.shift();", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "", 
                            "    pm.environment.set(\"list\",list);", 
                            "}", 
                            "var request = request.url;", 
                            "pm.environment.set(\"request\",request);"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method is used to create a bandwidthAllocation resource.", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"sessionFilter\": [\n        {\n        \"SourcePort\": [\"{{SourcePort}}\"],\n        \"DstAddress\": \"{{DstAddress}}\",\n        \"DstPort\": [\"{{DstPort}}\"],\n        \"Protocol\": \"{{Protocol}}\",\n        \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1535957574428, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "3c68395d-a7fe-4e20-8ee8-4f4578661918", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "description": "This method retrieves information about a specific bandwidthAllocation resource. ", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574428, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "id": "c6430d00-84ef-43ac-8b31-56f8252bd924", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "            ,\"timeStamp\" :{", 
                            "                \"seconds\" : list[i][\"timeStamp.seconds\"]", 
                            "                ,\"nanoSeconds\" : list[i][\"timeStamp.nanoSeconds\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PUT',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "", 
                            "if(!list){", 
                            "        var list = [];", 
                            "        pm.sendRequest({", 
                            "        url: 'localhost:8081/read_Excel',", 
                            "        method: 'GET',", 
                            "        header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "        }, function (err, res) {", 
                            "        var response_json = res.json();", 
                            "        if(list.length === 0){", 
                            "        var key;", 
                            "        for (key in response_json) {", 
                            "            if (response_json.hasOwnProperty(key))", 
                            "            {", 
                            "                list.push(response_json[key]);", 
                            "            }", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "    pm.environment.set(\"seconds\",currentData[\"timeStamp.seconds\"]);", 
                            "    pm.environment.set(\"nanoSeconds\",currentData[\"timeStamp.nanoSeconds\"]);", 
                            "", 
                            "    pm.environment.set(\"list\",list);", 
                            "});", 
                            "}", 
                            "var request = request.url;", 
                            "pm.environment.set(\"request\",request);"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"timeStamp\": {\n        \"seconds\": \"{{seconds}}\",\n        \"nanoSeconds\": \"{{nanoSeconds}}\"\n    },\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"sessionFilter\": [\n        {\n        \"SourcePort\": [\"{{SourcePort}}\"],\n        \"DstAddress\": \"{{DstAddress}}\",\n        \"DstPort\": [\"{{DstPort}}\"],\n        \"Protocol\": \"{{Protocol}}\",\n        \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1535957574428, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b185078-39af-4654-9897-b72452bdfa4e", 
            "responses": []
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "var request = pm.environment.get(\"request\");", 
                            "", 
                            "if(list && list.length > 0){", 
                            "    for(i = 0;i < list.length;i++){", 
                            "        req = {", 
                            "            \"fixedBWPriority\" : list[i].fixedBWPriority", 
                            "            ,\"allocationDirection\" : list[i].allocationDirection", 
                            "            ,\"appInsId\" : list[i].appInsId", 
                            "            ,\"requestType\" : list[i].requestType", 
                            "            ,\"fixedAllocation\" : list[i].fixedAllocation", 
                            "            ,\"sessionFilter\" :{", 
                            "                \"SourcePort\" : list[i][\"sessionFilter.SourcePort\"]", 
                            "                ,\"DstAddress\" : list[i][\"sessionFilter.DstAddress\"]", 
                            "                ,\"DstPort\" : list[i][\"sessionFilter.DstPort\"]", 
                            "                ,\"Protocol\" : list[i][\"sessionFilter.Protocol\"]", 
                            "                ,\"SourceIp\" : list[i][\"sessionFilter.SourceIp\"]", 
                            "            }", 
                            "        };", 
                            "        pm.sendRequest({", 
                            "            url: request,", 
                            "            method: 'PATCH',", 
                            "            header: {", 
                            "                \"Content-Type\": \"application/json\",", 
                            "                \"accept\": \"application/json\"", 
                            "            },", 
                            "            body: {", 
                            "                mode: 'raw',", 
                            "                raw: JSON.stringify(req)", 
                            "            }", 
                            "        },function (err, res) {", 
                            "            var response_json = res.json();", 
                            "            var jsonData = response_json;", 
                            "            pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "            });", 
                            "", 
                            "            pm.test(\"Body matches string\", function () {", 
                            "                pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "                pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "                pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "                pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "                pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "                pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "                pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "                pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "                pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "                pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "            });", 
                            "", 
                            "            pm.test(\"isString\" ,function() {", 
                            "                var jsonData = response_json;", 
                            "                for (i = 0; i < jsonData.length; i++) {", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "                    for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "                        for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "                        }", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "                        pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "                    }", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "                    pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "                }", 
                            "            });", 
                            "        });", 
                            "    }", 
                            "}", 
                            "else{", 
                            "    postman.setNextRequest();", 
                            "}", 
                            "", 
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var list = pm.environment.get(\"list\");", 
                            "", 
                            "if(!list){", 
                            "        var list = [];", 
                            "        pm.sendRequest({", 
                            "        url: 'localhost:8081/read_Excel',", 
                            "        method: 'GET',", 
                            "        header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "        }, function (err, res) {", 
                            "        var response_json = res.json();", 
                            "        if(list.length === 0){", 
                            "        var key;", 
                            "        for (key in response_json) {", 
                            "            if (response_json.hasOwnProperty(key))", 
                            "            {", 
                            "                list.push(response_json[key]);", 
                            "            }", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "    pm.environment.set(\"fixedBWPriority\",currentData.fixedBWPriority);", 
                            "    pm.environment.set(\"allocationDirection\",currentData.allocationDirection);", 
                            "    pm.environment.set(\"appInsId\",currentData.appInsId);", 
                            "    pm.environment.set(\"requestType\",currentData.requestType);", 
                            "    pm.environment.set(\"fixedAllocation\",currentData.fixedAllocation);", 
                            "    pm.environment.set(\"SourcePort\",currentData[\"sessionFilter.SourcePort\"]);", 
                            "    pm.environment.set(\"DstAddress\",currentData[\"sessionFilter.DstAddress\"]);", 
                            "    pm.environment.set(\"DstPort\",currentData[\"sessionFilter.DstPort\"]);", 
                            "    pm.environment.set(\"Protocol\",currentData[\"sessionFilter.Protocol\"]);", 
                            "    pm.environment.set(\"SourceIp\",currentData[\"sessionFilter.SourceIp\"]);", 
                            "", 
                            "    pm.environment.set(\"list\",list);", 
                            "});", 
                            "}", 
                            "var request = request.url;", 
                            "pm.environment.set(\"request\",request);"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This method updates the information about a specific bandwidthAllocation resource. ", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"allocationDirection\": \"{{allocationDirection}}\",\n    \"appInsId\": \"{{appInsId}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"fixedBWPriority\": \"{{fixedBWPriority}}\",\n    \"sessionFilter\": [\n        {\n        \"SourcePort\": [\"{{SourcePort}}\"],\n        \"DstAddress\": \"{{DstAddress}}\",\n        \"DstPort\": [\"{{DstPort}}\"],\n        \"Protocol\": \"{{Protocol}}\",\n        \"SourceIp\": \"{{SourceIp}}\"\n        }\n    ],\n    \"fixedAllocation\": \"{{fixedAllocation}}\"\n}", 
            "time": 1535957574428, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6019d42e-794a-4cfc-bcaf-eb537e3c7d28", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "description": "Remove a specific bandwidthAllocation resource. DELETE method is typically used in \"Unregister from Bandwidth Management Service\" procedure", 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations/:allocationId", 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574428, 
            "synced": false, 
            "pathVariables": {
                "allocationId": "{{allocationId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "id": "960eb176-7feb-4301-a168-13f484ff00f4", 
            "responses": []
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_instance_id={{app_instance_id}}", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574427, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "id": "e8cd47fa-56b5-4a9e-add6-36209519e7f60", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?app_name={{app_name}}", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574427, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "id": "e8cd47fa-56b5-4a9e-add6-36209519e7f61", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations?session_id={{session_id}}", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574427, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "id": "e8cd47fa-56b5-4a9e-add6-36209519e7f62", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
            "url": "{{scheme}}://{{host}}:{{port}}/bwm/v1/bw_allocations", 
            "description": "This method retrieves information about a list of bandwidthAllocation resources", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1535957574427, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"bwInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sessionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourcePort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DstPort\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Protocol\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SourceIp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"timeStamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"seconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nanoSeconds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedBWPriority\");", 
                            "    pm.expect(pm.response.text()).to.include(\"allocationDirection\");", 
                            "    pm.expect(pm.response.text()).to.include(\"appInsId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"requestType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fixedAllocation\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    var jsonData = pm.response.json();", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedBWPriority']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['allocationDirection']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['appInsId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['requestType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['fixedAllocation']).to.not.be.a('number');", 
                            "        for (j = 0; j < jsonData[i]['bwInfo']['sessionFilter'].length; j++) {", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourcePort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstAddress']).to.not.be.a('number');", 
                            "            for (k = 0; k < jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'].length; k++) {", 
                            "                pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['DstPort'][k]).to.be.a('string');", 
                            "            }", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['Protocol']).to.not.be.a('number');", 
                            "            pm.expect(jsonData[i]['bwInfo']['sessionFilter'][j]['SourceIp']).to.not.be.a('number');", 
                            "        }", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['seconds']).to.be.a('number');", 
                            "        pm.expect(jsonData[i]['bwInfo']['timeStamp']['nanoSeconds']).to.be.a('number');", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "test"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "id": "e8cd47fa-56b5-4a9e-add6-36209519e7f63", 
            "pathVariables": {}
        }
    ], 
    "id": "e14bafd6-6a53-4fb9-84dd-7e8e51e64b98", 
    "name": "BWM API"
}